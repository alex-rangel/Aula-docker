AULA 3:

comando para criar uma imagem da api: docker build -t api-register .

Comando para rodar o constainer usando a imagem da api que foi criada: docker run -d --name api-teste -p 3003:3003 api-register


AULA 4:

Comando para criar uma network no docker: docker network create net-register

Comando para rodar o container da api usando a imagem da api dentro da network q eu desejar: docker run -d --name api-teste -p 3003:3003 --network net-register api-register

Comando para rodar o container com o banco de dados do mongo dentro da network que eu desejar: docker run -d --name mongo-register -p 27017:27017 --network net-register mongo


AULA 5:

comando para criar uma imagem do frontend: docker build -t front-register .

comando para rodar um container do frontend: docker run --name front-register -it front-register

** Apos criar uma uma imagem da aplicação react e importante criar um container de teste so para poder visualizar se todos os arquivos da imagem do react foram criados de forma correta.

Comando para poder entrar dentro do container: docker exec -it front-register /bin/bash


AULA 6:

Para poder servir os arquivos de uma pagina web e preciso usar um servidor web, oque vai ser usado sera o NGINX,

Tambem sera necessario criar um volume para poder salvar os arquivos da minha pagina web dentro do meu HD

comando para criar uma imagem do frontend apos criar o volume dentro do arquivo dockerfile: docker build -t front-register .

comando para rodar um container do frontend com o volume: docker run -d --name front-register -v volume-register:/var/www/html --network net-register front-register

** Apos isso tem uer ser criado um arquivo de configuração para o nginx e tbm um arquivo Dockerfile dentro da pasta do nginx

Comando para criar uma imagem do nginx: docker build -t nginx-register .

Comando para rodar o container do nginx com o volume ja incluso: docker run -d --name nginx-container -v volume-register:/var/www/html -p 80:80 --network net-register nginx-register

** Para que o nginx tenha acesso as rotas eu preciso configurar o #fallback no arquivo nginx.conf

AULA 8:

Sempre que as propriedades são terminadas em plural se coloca o valor com um traço antes, por que ai da pra se colocar varios valores dentro dele.

O comando para rodar o docker compose é: docker compose up -d

Para poder descer e apagar todos os container é so da o comando: docker compose down

Se quiser apagar os os volumes tem que ser o comando: docker compose down -v

** Se mudar alguma coisa no codigo e quiser atualizar os containers e as imagens e do dá o comando para apagar todos os containers e apagars todas as imagens de forma manual

AULA 9:

Apos criar a minha estancia no ec2 da aws e conectar na minha estancia tenho que fazer as instalações necessarias na minha maquina da aws.

--Instalando o docker--

sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg

--Adicionando o repositório às fontes do Apt--

echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

--Verificando a instalação do docker--

    sudo docker run hello-world

--Criando o grupo do docker--

    sudo groupadd docker

--Adicionando o meu usuário ao grupo docker--

    sudo usermod -aG docker $USER

--Ultimo comando para não precisar colocar o sudo nos comandos do docker--

    newgrp docker

--Verificando se o procedimeto deu certo--

    docker run hello-world

**Apos realizar todo esse procedimento basta clonar o repositório dentro da instancia da aws e executar os comandos para poder gerar as imagens e os containers atraves do docker

CONSIDERAÇÕES FINAIS: 

-- Quando se quer saber se o sevidor esta rodando damos o comando: docker logs "nome do container " "devbills-api" --follow